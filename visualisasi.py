# -*- coding: utf-8 -*-
"""Visualisasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16UBtHmH8EpeJchheEN9JckpClwHkLtw8
"""

import kagglehub

path = kagglehub.dataset_download("muhdaniyal/supermarket-sales-cleaned-dataset")

print("Path to dataset files:", path)

from google.colab import files
import pandas as pd
import io

uploaded = files.upload()
filename = list(uploaded.keys())[0]
data = pd.read_csv(io.BytesIO(uploaded[filename]))
data.head()

import pandas as pd

top_5_products = data.groupby('Product line')['Quantity'].sum().sort_values(ascending=False).head(5)
top_5_products

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.bar(top_5_products.index, top_5_products.values)
plt.xlabel("Product Line")
plt.ylabel("Total Quantity Sold")
plt.title("Top 5 Product Lines by Quantity Sold")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

data['Date'] = pd.to_datetime(data['Date'])

product_sales_over_time = data.groupby(['Date', 'Product line'])['Quantity'].sum().reset_index()

top_5_products = data.groupby('Product line')['Quantity'].sum().sort_values(ascending=False).head(5).index

filtered_data = product_sales_over_time[product_sales_over_time['Product line'].isin(top_5_products)]

plt.figure(figsize=(12, 6))
sns.lineplot(x='Date', y='Quantity', hue='Product line', data=filtered_data)
plt.title('Sales of Top 5 Products Over Time')
plt.xlabel('Date')
plt.ylabel('Quantity Sold')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

filtered_data['Date'] = pd.to_datetime(filtered_data['Date'])

filtered_data['Month'] = filtered_data['Date'].dt.to_period('M')

for month in filtered_data['Month'].unique():
    monthly_data = filtered_data[filtered_data['Month'] == month]
    plt.figure(figsize=(12, 6))
    sns.lineplot(x='Date', y='Quantity', hue='Product line', data=monthly_data)
    plt.title(f'Sales of Top 5 Products in {month}')
    plt.xlabel('Date')
    plt.ylabel('Quantity Sold')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

filtered_data['Date'] = pd.to_datetime(filtered_data['Date'])

product_sales = filtered_data.groupby(['Product line', 'Date'])['Quantity'].sum().reset_index()

for product in product_sales['Product line'].unique():
    product_data = product_sales[product_sales['Product line'] == product]
    plt.figure(figsize=(12, 6))
    sns.lineplot(x='Date', y='Quantity', data=product_data)
    plt.title(f'Sales of {product} Over Time')
    plt.xlabel('Date')
    plt.ylabel('Quantity Sold')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

product_sales = data.groupby('Product line')['Total'].sum()

sales_above_100 = product_sales[product_sales > 100]
sales_below_100 = product_sales[product_sales < 100]

print("Products with sales above 100:")
print(sales_above_100)

print("\nProducts with sales below 100:")
sales_below_100

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(8, 8))

payment_counts = data["Payment"].value_counts()
plt.pie(payment_counts, labels=payment_counts.index, autopct="%1.1f%%", colors=sns.color_palette("Set2"))
plt.title("Distribution of Payment Methods", fontsize=14)
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))

avg_rating_per_category = data.groupby("Product line")["Rating"].mean().sort_values()
sns.barplot(x=avg_rating_per_category.values, y=avg_rating_per_category.index, palette="coolwarm")
plt.title("Average Product Rating per Category", fontsize=14)
plt.xlabel("Average Rating", fontsize=12)
plt.ylabel("Product Line", fontsize=12)
plt.xlim(0, 10)
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

plt.figure(figsize=(10, 6))
data["Hour"] = pd.to_datetime(data["Time"]).dt.hour
sns.histplot(data["Hour"], bins=24, kde=True, color="purple")
plt.title("Transaction Distribution by Hour", fontsize=14)
plt.xlabel("Hour of Day", fontsize=12)
plt.ylabel("Number of Transactions", fontsize=12)
plt.xticks(range(0, 24))
plt.show()

plt.figure(figsize=(8, 6))

sales_per_gender = data.groupby("Gender")["Total"].sum()
sns.barplot(x=sales_per_gender.index, y=sales_per_gender.values, palette="pastel")
plt.title("Total Sales by Customer Gender", fontsize=14)
plt.xlabel("Gender", fontsize=12)
plt.ylabel("Total Sales", fontsize=12)
plt.show()

plt.figure(figsize=(8, 6))

sns.scatterplot(x=data["gross income"], y=data["Total"], alpha=0.5, color="green")
plt.title("Gross Income vs Total Sales", fontsize=14)
plt.xlabel("Gross Income", fontsize=12)
plt.ylabel("Total Sales", fontsize=12)
plt.show()

plt.figure(figsize=(10, 6))
# Replace 'df' with 'data' to use the correct DataFrame
profit_per_category = data.groupby("Product line")["gross income"].sum().sort_values()
sns.barplot(x=profit_per_category.values, y=profit_per_category.index, palette="magma")
plt.title("Total Profit per Product Line", fontsize=14)
plt.xlabel("Total Profit", fontsize=12)
plt.ylabel("Product Line", fontsize=12)
plt.show()

plt.figure(figsize=(12, 6))

city_product_sales = data.groupby(["City", "Product line"])["Total"].sum().unstack()
city_product_sales.plot(kind="bar", stacked=True, colormap="tab10", figsize=(12, 6))
plt.title("Sales Pattern per City", fontsize=14)
plt.xlabel("City", fontsize=12)
plt.ylabel("Total Sales", fontsize=12)
plt.xticks(rotation=0)
plt.legend(title="Product Line")
plt.show()

data["Day"] = pd.to_datetime(data["Date"]).dt.day
pivot_table = data.pivot_table(values="Total", index="Hour", columns="Day", aggfunc="sum")

plt.figure(figsize=(12, 6))
sns.heatmap(pivot_table, cmap="coolwarm", linewidths=0.5, annot=True, fmt=".0f")
plt.title("Transaction Heatmap by Hour and Day", fontsize=14)
plt.xlabel("Day of the Month", fontsize=12)
plt.ylabel("Hour of the Day", fontsize=12)
plt.show()